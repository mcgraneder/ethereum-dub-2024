/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "IERC1822ProxiableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1822ProxiableUpgradeable__factory>;
    getContractFactory(
      name: "IERC1967Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1967Upgradeable__factory>;
    getContractFactory(
      name: "IBeaconUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBeaconUpgradeable__factory>;
    getContractFactory(
      name: "ERC1967UpgradeUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967UpgradeUpgradeable__factory>;
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "UUPSUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UUPSUpgradeable__factory>;
    getContractFactory(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControl__factory>;
    getContractFactory(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControl__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "IERC1822Proxiable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1822Proxiable__factory>;
    getContractFactory(
      name: "IERC1967",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1967__factory>;
    getContractFactory(
      name: "IBeacon",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBeacon__factory>;
    getContractFactory(
      name: "ERC1967Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967Proxy__factory>;
    getContractFactory(
      name: "ERC1967Upgrade",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967Upgrade__factory>;
    getContractFactory(
      name: "Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Proxy__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "ERC20Burnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Burnable__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ERC20PresetFixedSupply",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20PresetFixedSupply__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "IPancakeV3Factory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPancakeV3Factory__factory>;
    getContractFactory(
      name: "IPancakeV3Pool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPancakeV3Pool__factory>;
    getContractFactory(
      name: "IPancakeV3PoolActions",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPancakeV3PoolActions__factory>;
    getContractFactory(
      name: "IPancakeV3PoolDerivedState",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPancakeV3PoolDerivedState__factory>;
    getContractFactory(
      name: "IPancakeV3PoolEvents",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPancakeV3PoolEvents__factory>;
    getContractFactory(
      name: "IPancakeV3PoolImmutables",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPancakeV3PoolImmutables__factory>;
    getContractFactory(
      name: "IPancakeV3PoolOwnerActions",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPancakeV3PoolOwnerActions__factory>;
    getContractFactory(
      name: "IPancakeV3PoolState",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPancakeV3PoolState__factory>;
    getContractFactory(
      name: "AddressRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AddressRegistry__factory>;
    getContractFactory(
      name: "Schnorr2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Schnorr2__factory>;
    getContractFactory(
      name: "Secp256k1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Secp256k1__factory>;
    getContractFactory(
      name: "ECDSAPublicKeyRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ECDSAPublicKeyRegistry__factory>;
    getContractFactory(
      name: "ECDSAWallet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ECDSAWallet__factory>;
    getContractFactory(
      name: "ECDSAWalletFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ECDSAWalletFactory__factory>;
    getContractFactory(
      name: "ECDSAWalletState",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ECDSAWalletState__factory>;
    getContractFactory(
      name: "ECDSAWalletVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ECDSAWalletVerifier__factory>;
    getContractFactory(
      name: "ECDSAWalletView",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ECDSAWalletView__factory>;
    getContractFactory(
      name: "IERC1271",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1271__factory>;
    getContractFactory(
      name: "IWallet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWallet__factory>;
    getContractFactory(
      name: "IWalletFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWalletFactory__factory>;
    getContractFactory(
      name: "IPancakeV2Factory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPancakeV2Factory__factory>;
    getContractFactory(
      name: "IPancakeV2Pair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPancakeV2Pair__factory>;
    getContractFactory(
      name: "IPancakeV3Factory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPancakeV3Factory__factory>;
    getContractFactory(
      name: "IPancakeV3Factory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPancakeV3Factory__factory>;
    getContractFactory(
      name: "IPancakeV3Pool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPancakeV3Pool__factory>;
    getContractFactory(
      name: "CALLER",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CALLER__factory>;
    getContractFactory(
      name: "SmartWalletHasher",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SmartWalletHasher__factory>;
    getContractFactory(
      name: "Secp256k1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Secp256k1__factory>;
    getContractFactory(
      name: "SmartWallet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SmartWallet__factory>;
    getContractFactory(
      name: "SmartWalletFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SmartWalletFactory__factory>;
    getContractFactory(
      name: "AMMSwap",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AMMSwap__factory>;
    getContractFactory(
      name: "ABC",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ABC__factory>;
    getContractFactory(
      name: "PQR",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PQR__factory>;
    getContractFactory(
      name: "XYZ",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.XYZ__factory>;
    getContractFactory(
      name: "WalletBridgeVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WalletBridgeVerifier__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;

    getContractAt(
      name: "IERC1822ProxiableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1822ProxiableUpgradeable>;
    getContractAt(
      name: "IERC1967Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1967Upgradeable>;
    getContractAt(
      name: "IBeaconUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBeaconUpgradeable>;
    getContractAt(
      name: "ERC1967UpgradeUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967UpgradeUpgradeable>;
    getContractAt(
      name: "Initializable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "UUPSUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UUPSUpgradeable>;
    getContractAt(
      name: "AccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControl>;
    getContractAt(
      name: "IAccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControl>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "IERC1822Proxiable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1822Proxiable>;
    getContractAt(
      name: "IERC1967",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1967>;
    getContractAt(
      name: "IBeacon",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBeacon>;
    getContractAt(
      name: "ERC1967Proxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967Proxy>;
    getContractAt(
      name: "ERC1967Upgrade",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967Upgrade>;
    getContractAt(
      name: "Proxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Proxy>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "ERC20Burnable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Burnable>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ERC20PresetFixedSupply",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20PresetFixedSupply>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "IPancakeV3Factory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPancakeV3Factory>;
    getContractAt(
      name: "IPancakeV3Pool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPancakeV3Pool>;
    getContractAt(
      name: "IPancakeV3PoolActions",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPancakeV3PoolActions>;
    getContractAt(
      name: "IPancakeV3PoolDerivedState",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPancakeV3PoolDerivedState>;
    getContractAt(
      name: "IPancakeV3PoolEvents",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPancakeV3PoolEvents>;
    getContractAt(
      name: "IPancakeV3PoolImmutables",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPancakeV3PoolImmutables>;
    getContractAt(
      name: "IPancakeV3PoolOwnerActions",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPancakeV3PoolOwnerActions>;
    getContractAt(
      name: "IPancakeV3PoolState",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPancakeV3PoolState>;
    getContractAt(
      name: "AddressRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AddressRegistry>;
    getContractAt(
      name: "Schnorr2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Schnorr2>;
    getContractAt(
      name: "Secp256k1",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Secp256k1>;
    getContractAt(
      name: "ECDSAPublicKeyRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ECDSAPublicKeyRegistry>;
    getContractAt(
      name: "ECDSAWallet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ECDSAWallet>;
    getContractAt(
      name: "ECDSAWalletFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ECDSAWalletFactory>;
    getContractAt(
      name: "ECDSAWalletState",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ECDSAWalletState>;
    getContractAt(
      name: "ECDSAWalletVerifier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ECDSAWalletVerifier>;
    getContractAt(
      name: "ECDSAWalletView",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ECDSAWalletView>;
    getContractAt(
      name: "IERC1271",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1271>;
    getContractAt(
      name: "IWallet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWallet>;
    getContractAt(
      name: "IWalletFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWalletFactory>;
    getContractAt(
      name: "IPancakeV2Factory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPancakeV2Factory>;
    getContractAt(
      name: "IPancakeV2Pair",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPancakeV2Pair>;
    getContractAt(
      name: "IPancakeV3Factory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPancakeV3Factory>;
    getContractAt(
      name: "IPancakeV3Factory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPancakeV3Factory>;
    getContractAt(
      name: "IPancakeV3Pool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPancakeV3Pool>;
    getContractAt(
      name: "CALLER",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CALLER>;
    getContractAt(
      name: "SmartWalletHasher",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SmartWalletHasher>;
    getContractAt(
      name: "Secp256k1",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Secp256k1>;
    getContractAt(
      name: "SmartWallet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SmartWallet>;
    getContractAt(
      name: "SmartWalletFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SmartWalletFactory>;
    getContractAt(
      name: "AMMSwap",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AMMSwap>;
    getContractAt(
      name: "ABC",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ABC>;
    getContractAt(
      name: "PQR",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PQR>;
    getContractAt(
      name: "XYZ",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.XYZ>;
    getContractAt(
      name: "WalletBridgeVerifier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WalletBridgeVerifier>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
