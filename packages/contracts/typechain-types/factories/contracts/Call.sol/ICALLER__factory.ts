/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  ICALLER,
  ICALLERInterface,
} from "../../../contracts/Call.sol/ICALLER";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "execute",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60808060405234610016576101cb908161001c8239f35b600080fdfe608080604052600436101561001357600080fd5b6000803560e01c6309c5eabe1461002957600080fd5b3461016c57602036600319011261016c576004359067ffffffffffffffff92838311610164573660238401121561016457826004013584811161016857830136602482011161016857836080910312610164576100886024840161016f565b936100956044850161016f565b9473ffffffffffffffffffffffffffffffffffffffff9460648101358681160361016057906100c7608487930161016f565b50169360208301957fdaf0d4aa0000000000000000000000000000000000000000000000000000000087528560248501521660448301526044825260808201908282109082111761013357604052516020938291906a636f6e736f6c652e6c6f675afa50604051908152f35b6024837f4e487b710000000000000000000000000000000000000000000000000000000081526041600452fd5b8480fd5b5080fd5b8280fd5b80fd5b359073ffffffffffffffffffffffffffffffffffffffff8216820361019057565b600080fdfea2646970667358221220fe4cb0842358dfbb9ca7e82b4cb4e0079ff1f7237288744a7929afe2d8ec9b1664736f6c63430008110033";

type ICALLERConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ICALLERConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ICALLER__factory extends ContractFactory {
  constructor(...args: ICALLERConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ICALLER> {
    return super.deploy(overrides || {}) as Promise<ICALLER>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ICALLER {
    return super.attach(address) as ICALLER;
  }
  override connect(signer: Signer): ICALLER__factory {
    return super.connect(signer) as ICALLER__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ICALLERInterface {
    return new utils.Interface(_abi) as ICALLERInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ICALLER {
    return new Contract(address, _abi, signerOrProvider) as ICALLER;
  }
}
