/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  Secp256k1,
  Secp256k1Interface,
} from "../../../../contracts/crypto/Schnorr.sol/Secp256k1";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "hash",
        type: "bytes32",
      },
    ],
    name: "hashToPoint",
    outputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "y",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[2]",
        name: "point",
        type: "uint256[2]",
      },
    ],
    name: "point_hash",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080806040523461001a5761051e9081610020823930815050f35b600080fdfe608060409080825260048036101561001657600080fd5b600091823560e01c908163426817fa146100a65750638236342c1461003a57600080fd5b60203660031901126100a2576401000003d019918282350691815b61008f5761006c846007818087800987090861019e565b8061007e575083600183940892610055565b935050509082519182526020820152f35b906012602492634e487b7160e01b835252fd5b5080fd5b84915083826003193601126101765736602312156101765767ffffffffffffffff928281018481118482101761016357815260448336821161015f5786905b82821061014f575050506020835193015191815192602084019485528284015281835260608301948386109086111761013c578482528251842073ffffffffffffffffffffffffffffffffffffffff168552602085f35b80604187634e487b7160e01b6024945252fd5b81358152602091820191016100e5565b8380fd5b602483604188634e487b7160e01b835252fd5b80fd5b60001981146101885760010190565b634e487b7160e01b600052601160045260246000fd5b906000916000908015610357576001806101b7836103d2565b03610350578281816401000003d1195b8281161561033b576002945b6102eb575b8281018082116102935781610202859798949596936101fc61020894891c87610462565b95610462565b97610462565b90945b6102185750505050505050565b8694865b8187106102c7575b5085156102bb578581039081116102a75760001981019081116102935760ff81116102935784939291889561025a921b90610462565b9361027f578291906401000003d019908180878009968792099709959193909261020b565b602487634e487b7160e01b81526012600452fd5b602488634e487b7160e01b81526011600452fd5b602484634e487b7160e01b81526011600452fd5b50909750505050505050565b8581146102e6576102da6102e09161035c565b96610179565b9561021c565b610224565b909193958061032757506102fe866103d2565b9582966401000003d1191461031f5790610319859392610179565b946101d3565b9391906101d8565b80634e487b7160e01b602492526011600452fd5b61034791921c92610179565b919083916101c7565b5090925050565b509150565b80156103cc5760019081600160ff1b91825b6103785750505090565b9091926401000003d0199081808080600294818a87161515890a918009098189891c86161515880a918009098188851c85161515870a91800909918660031c161515840a918009099260041c91908261036e565b50600090565b80156103cc5760019081600160ff1b91825b6103ee5750505090565b9091926401000003d01990818080807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffff7ffffe1794818a87161515890a918009098189891c86161515880a91800909818860021c85161515870a91800909918660031c161515840a918009099260041c9190826103e4565b80156104e15781156104da579060019182600160ff1b92835b610486575050505090565b909192936401000003d01980808093818987161515890a918009098188871c86161515880a91800909818760021c85161515870a91800909818660031c84161515860a918009099360041c9291908361047b565b5050600190565b505060009056fea26469706673582212200e6cc03da6e2d312a2cc3dea5699b7985edc04f0cfb816d353050d11ce570e5364736f6c63430008110033";

type Secp256k1ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Secp256k1ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Secp256k1__factory extends ContractFactory {
  constructor(...args: Secp256k1ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Secp256k1> {
    return super.deploy(overrides || {}) as Promise<Secp256k1>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Secp256k1 {
    return super.attach(address) as Secp256k1;
  }
  override connect(signer: Signer): Secp256k1__factory {
    return super.connect(signer) as Secp256k1__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Secp256k1Interface {
    return new utils.Interface(_abi) as Secp256k1Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Secp256k1 {
    return new Contract(address, _abi, signerOrProvider) as Secp256k1;
  }
}
