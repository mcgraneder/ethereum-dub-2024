/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  EC,
  ECInterface,
} from "../../../../contracts/crypto/Schnorr.sol/EC";

const _abi = [
  {
    inputs: [],
    name: "U255_MAX_PLUS_1",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608080604052346014576098908161001a8239f35b600080fdfe6080806040526004361015601257600080fd5b600090813560e01c63f1fd459f14602857600080fd5b34605e5781600319360112605e57807f800000000000000000000000000000000000000000000000000000000000000060209252f35b5080fdfea26469706673582212208c25ec350863d707856d0c92086c6315201858ec1643958e0f8085bbba0c9e2864736f6c63430008110033";

type ECConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ECConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class EC__factory extends ContractFactory {
  constructor(...args: ECConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<EC> {
    return super.deploy(overrides || {}) as Promise<EC>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): EC {
    return super.attach(address) as EC;
  }
  override connect(signer: Signer): EC__factory {
    return super.connect(signer) as EC__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ECInterface {
    return new utils.Interface(_abi) as ECInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): EC {
    return new Contract(address, _abi, signerOrProvider) as EC;
  }
}
