/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  Permit2NonceFinder,
  Permit2NonceFinderInterface,
} from "../../../../contracts/utils/NonceHelper.sol/Permit2NonceFinder";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_permit2",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "nextNonce",
    outputs: [
      {
        internalType: "uint256",
        name: "nonce",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "start",
        type: "uint256",
      },
    ],
    name: "nextNonceAfter",
    outputs: [
      {
        internalType: "uint256",
        name: "nonce",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "permit2",
    outputs: [
      {
        internalType: "contract ISignatureTransfer",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a03461007957601f6104f938819003918201601f19168301916001600160401b0383118484101761007e5780849260209460405283398101031261007957516001600160a01b03811690819003610079576080526040516104649081610095823960805181818160ce0152818161019a01526102f70152f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe6080604052600436101561001257600080fd5b6000803560e01c80630cd55abf146100f257806312261ee7146100a157635ebf8b7d1461003e57600080fd5b3461009e57604036600319011261009e5761008560209161005d610116565b9060243560ff8160081c911660ff811460001461008d575061007e90610165565b90916102db565b604051908152f35b61009891925061013e565b916102db565b80fd5b503461009e578060031936011261009e57602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b503461009e57602036600319011261009e576020610085610111610116565b61017d565b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361013957565b600080fd5b60ff1660ff811461014f5760010190565b634e487b7160e01b600052601160045260246000fd5b6001600160f81b0380911690811461014f5760010190565b6000908173ffffffffffffffffffffffffffffffffffffffff90817f000000000000000000000000000000000000000000000000000000000000000016915b60409283516313f80ad160e21b815260048387168183015260246001600160f81b038616818401526020918284604481885afa9788156102d157600098610272575b5050505050839460001985146102585750505060ff918285168061024e575b505092915b6001808083160361023e571c916102389061013e565b91610222565b5050169060ff199060081b161790565b1c9250388061021d565b93509350935061026790610165565b6000939192916101bc565b8398949598923d85116102c9575b601f8401601f191687019267ffffffffffffffff8411888510176102b85750505283018390031261009e5750519238808080806101fe565b60418791634e487b7160e01b835252fd5b3d9350610280565b513d6000823e3d90fd5b9060009073ffffffffffffffffffffffffffffffffffffffff807f000000000000000000000000000000000000000000000000000000000000000016925b60409384516313f80ad160e21b815260048488168183015260246001600160f81b038716818401526020918284604481885afa9889156104255786996103c0575b5050505050849560001986146103a5575050505060ff918285168061039b575b505092915b6001808083160361023e571c916103959061013e565b9161037f565b1c9250388061037a565b9391955093506103b6919550610165565b9083949093610319565b9091928094959950923d851161041d575b601f8401601f191686019267ffffffffffffffff84118785101761040c57505052820182900312610408575193388080808061035a565b5080fd5b60418891634e487b7160e01b835252fd5b3d93506103d1565b513d87823e3d90fdfea2646970667358221220a554d159be329ff4ebd6bd02589c24f7a9a5405a0f0ee8595a3efc54dd1d3fbb64736f6c63430008110033";

type Permit2NonceFinderConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Permit2NonceFinderConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Permit2NonceFinder__factory extends ContractFactory {
  constructor(...args: Permit2NonceFinderConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _permit2: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Permit2NonceFinder> {
    return super.deploy(
      _permit2,
      overrides || {}
    ) as Promise<Permit2NonceFinder>;
  }
  override getDeployTransaction(
    _permit2: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_permit2, overrides || {});
  }
  override attach(address: string): Permit2NonceFinder {
    return super.attach(address) as Permit2NonceFinder;
  }
  override connect(signer: Signer): Permit2NonceFinder__factory {
    return super.connect(signer) as Permit2NonceFinder__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Permit2NonceFinderInterface {
    return new utils.Interface(_abi) as Permit2NonceFinderInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Permit2NonceFinder {
    return new Contract(address, _abi, signerOrProvider) as Permit2NonceFinder;
  }
}
