/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { Deployer, DeployerInterface } from "../../contracts/Deployer";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_proxyAdmin",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "SALT",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "bytecode",
        type: "bytes",
      },
      {
        internalType: "bytes32",
        name: "salt",
        type: "bytes32",
      },
    ],
    name: "deployContract",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "proxyAdmin",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a03461006a57601f61035138819003918201601f19168301916001600160401b0383118484101761006f5780849260209460405283398101031261006a57516001600160a01b038116810361006a576080526040516102cb908161008682396080518161017a0152f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe60806040526004361015610013575b600080fd5b6000803560e01c9081632bd7910b14610052575080633e47158c146100495763ba9a91a51461004157600080fd5b61000e61019e565b5061000e61014c565b346100ea5760403660031901126100ea5767ffffffffffffffff6004358181116100e657366023820112156100e65780600401359182116100d9575b82604051916100a76020601f19601f870116018461011d565b83835236602485830101116100d557836100d294602460209301838601378301015260243590610210565b80f35b5080fd5b6100e16100ed565b61008e565b8280fd5b80fd5b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff82111761013f57604052565b6101476100ed565b604052565b503461000e57600036600319011261000e57602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b503461000e57600036600319011261000e5760206040518181017f796f75725f73616c745f686572650000000000000000000000000000000000008152600e8252604082019180831067ffffffffffffffff841117610203575b826040525190208152f35b61020b6100ed565b6101f8565b805173ffffffffffffffffffffffffffffffffffffffff92916020016000f5161561023757565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f4465706c6f796d656e74206661696c65640000000000000000000000000000006044820152fdfea26469706673582212202477cad53a6af411e6d05bd757ed11784e4b3ba66d87a0b446ba75441499af8164736f6c63430008110033";

type DeployerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DeployerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Deployer__factory extends ContractFactory {
  constructor(...args: DeployerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _proxyAdmin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Deployer> {
    return super.deploy(_proxyAdmin, overrides || {}) as Promise<Deployer>;
  }
  override getDeployTransaction(
    _proxyAdmin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_proxyAdmin, overrides || {});
  }
  override attach(address: string): Deployer {
    return super.attach(address) as Deployer;
  }
  override connect(signer: Signer): Deployer__factory {
    return super.connect(signer) as Deployer__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DeployerInterface {
    return new utils.Interface(_abi) as DeployerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Deployer {
    return new Contract(address, _abi, signerOrProvider) as Deployer;
  }
}
