/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  ContractAddresses,
  ContractAddressesInterface,
} from "../../../../contracts/permit2/libraries/ContractAddresses";

const _abi = [
  {
    inputs: [],
    name: "PANCAKE_V3_FACTORY_BSC",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "PANCAKE_V3_FACTORY_ETH",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "WETH_BSC",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "WETH_ETH",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608080604052346100195760db908161001f823930815050f35b600080fdfe608060405260043610156012575b600080fd5b60003560e01c80634ea5fc861460515780635ec3aa4b1460515780636880c5c814604a5763d4dc024214604457600080fd5b600d607b565b50600d607b565b506000366003190112600d57602060405173bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c8152f35b506000366003190112600d576020604051730bfbcf9fa4f9c56b0f40a671ad40e0805a0918658152f3fea26469706673582212201528af1d6f07c85fdfc3199f01fd9d8edb146abbaee3545874fd7d62ea53170a64736f6c63430008110033";

type ContractAddressesConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ContractAddressesConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ContractAddresses__factory extends ContractFactory {
  constructor(...args: ContractAddressesConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractAddresses> {
    return super.deploy(overrides || {}) as Promise<ContractAddresses>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ContractAddresses {
    return super.attach(address) as ContractAddresses;
  }
  override connect(signer: Signer): ContractAddresses__factory {
    return super.connect(signer) as ContractAddresses__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ContractAddressesInterface {
    return new utils.Interface(_abi) as ContractAddressesInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ContractAddresses {
    return new Contract(address, _abi, signerOrProvider) as ContractAddresses;
  }
}
