/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  CALLER,
  CALLERInterface,
} from "../../../../contracts/libraries/Call.sol/CALLER";

const _abi = [
  {
    inputs: [],
    name: "ALLOWANCE_SELECTOR",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "SWAP_SELECTOR",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "TRANSFER_SELECTOR",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608080604052346100195760c4908161001f823930815050f35b600080fdfe6080806040526004361015601257600080fd5b600090813560e01c9081635746d3ca1460725750806372e9322514605957639aba471f14603e57600080fd5b80600319360112605657602060405163095ea7b38152f35b80fd5b508060031936011260565760206040516336c785168152f35b905081600319360112608a578063d3986f0860209252f35b5080fdfea2646970667358221220a3f08dfe313cac443a3b3092d438f585d87f6234f99d0bc21250f1364ce7855b64736f6c63430008110033";

type CALLERConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CALLERConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CALLER__factory extends ContractFactory {
  constructor(...args: CALLERConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<CALLER> {
    return super.deploy(overrides || {}) as Promise<CALLER>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): CALLER {
    return super.attach(address) as CALLER;
  }
  override connect(signer: Signer): CALLER__factory {
    return super.connect(signer) as CALLER__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CALLERInterface {
    return new utils.Interface(_abi) as CALLERInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): CALLER {
    return new Contract(address, _abi, signerOrProvider) as CALLER;
  }
}
