/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace CALLER {
  export type IPAllowanceStruct = {
    spender: PromiseOrValue<string>;
    amount: PromiseOrValue<BigNumberish>;
  };

  export type IPAllowanceStructOutput = [string, BigNumber] & {
    spender: string;
    amount: BigNumber;
  };

  export type IPSwapStruct = {
    amount: PromiseOrValue<BigNumberish>;
    reciever: PromiseOrValue<string>;
  };

  export type IPSwapStructOutput = [BigNumber, string] & {
    amount: BigNumber;
    reciever: string;
  };

  export type IPTransferStruct = {
    from: PromiseOrValue<string>;
    to: PromiseOrValue<string>;
    amount: PromiseOrValue<BigNumberish>;
    token: PromiseOrValue<string>;
  };

  export type IPTransferStructOutput = [string, string, BigNumber, string] & {
    from: string;
    to: string;
    amount: BigNumber;
    token: string;
  };
}

export interface CALLERInterface extends utils.Interface {
  functions: {
    "executeApprove(bytes)": FunctionFragment;
    "executeSwap(bytes)": FunctionFragment;
    "executeTransfer(bytes)": FunctionFragment;
    "executeTransfer2(bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "executeApprove"
      | "executeSwap"
      | "executeTransfer"
      | "executeTransfer2"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "executeApprove",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "executeSwap",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "executeTransfer",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "executeTransfer2",
    values: [PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "executeApprove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeTransfer2",
    data: BytesLike
  ): Result;

  events: {};
}

export interface CALLER extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CALLERInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    executeApprove(
      msgData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[CALLER.IPAllowanceStructOutput]>;

    executeSwap(
      msgData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[CALLER.IPSwapStructOutput]>;

    executeTransfer(
      msgData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[CALLER.IPTransferStructOutput]>;

    executeTransfer2(
      msgData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, string] & {
        from: string;
        to: string;
        amount: BigNumber;
        token: string;
      }
    >;
  };

  executeApprove(
    msgData: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<CALLER.IPAllowanceStructOutput>;

  executeSwap(
    msgData: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<CALLER.IPSwapStructOutput>;

  executeTransfer(
    msgData: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<CALLER.IPTransferStructOutput>;

  executeTransfer2(
    msgData: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, string] & {
      from: string;
      to: string;
      amount: BigNumber;
      token: string;
    }
  >;

  callStatic: {
    executeApprove(
      msgData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<CALLER.IPAllowanceStructOutput>;

    executeSwap(
      msgData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<CALLER.IPSwapStructOutput>;

    executeTransfer(
      msgData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<CALLER.IPTransferStructOutput>;

    executeTransfer2(
      msgData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, string] & {
        from: string;
        to: string;
        amount: BigNumber;
        token: string;
      }
    >;
  };

  filters: {};

  estimateGas: {
    executeApprove(
      msgData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    executeSwap(
      msgData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    executeTransfer(
      msgData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    executeTransfer2(
      msgData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    executeApprove(
      msgData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    executeSwap(
      msgData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    executeTransfer(
      msgData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    executeTransfer2(
      msgData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
