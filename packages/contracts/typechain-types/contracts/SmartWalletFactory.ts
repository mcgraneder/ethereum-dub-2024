/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface SmartWalletFactoryInterface extends utils.Interface {
  functions: {
    "PANCAKE_V2_FACTORY()": FunctionFragment;
    "PANCAKE_V3_FACTORY()": FunctionFragment;
    "RELAYER()": FunctionFragment;
    "WETH9()": FunctionFragment;
    "addSupportedFeeAsset(address,bool)": FunctionFragment;
    "createWallet(address,uint256[2],bytes)": FunctionFragment;
    "ecdsaFactory()": FunctionFragment;
    "nonces(bytes32)": FunctionFragment;
    "priv()": FunctionFragment;
    "queryFeeAsset(address)": FunctionFragment;
    "setEcdsaFactory(address)": FunctionFragment;
    "supportedFeeAssets(address)": FunctionFragment;
    "walletAddress(address,uint256[2],bytes,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "PANCAKE_V2_FACTORY"
      | "PANCAKE_V3_FACTORY"
      | "RELAYER"
      | "WETH9"
      | "addSupportedFeeAsset"
      | "createWallet"
      | "ecdsaFactory"
      | "nonces"
      | "priv"
      | "queryFeeAsset"
      | "setEcdsaFactory"
      | "supportedFeeAssets"
      | "walletAddress"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "PANCAKE_V2_FACTORY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PANCAKE_V3_FACTORY",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "RELAYER", values?: undefined): string;
  encodeFunctionData(functionFragment: "WETH9", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addSupportedFeeAsset",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "createWallet",
    values: [
      PromiseOrValue<string>,
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "ecdsaFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nonces",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "priv", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "queryFeeAsset",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setEcdsaFactory",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportedFeeAssets",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "walletAddress",
    values: [
      PromiseOrValue<string>,
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "PANCAKE_V2_FACTORY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PANCAKE_V3_FACTORY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "RELAYER", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "WETH9", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addSupportedFeeAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ecdsaFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "priv", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "queryFeeAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEcdsaFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportedFeeAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "walletAddress",
    data: BytesLike
  ): Result;

  events: {
    "WalletCreated(address,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "WalletCreated"): EventFragment;
}

export interface WalletCreatedEventObject {
  _wallet: string;
  _callID: string;
}
export type WalletCreatedEvent = TypedEvent<
  [string, string],
  WalletCreatedEventObject
>;

export type WalletCreatedEventFilter = TypedEventFilter<WalletCreatedEvent>;

export interface SmartWalletFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SmartWalletFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    PANCAKE_V2_FACTORY(overrides?: CallOverrides): Promise<[string]>;

    PANCAKE_V3_FACTORY(overrides?: CallOverrides): Promise<[string]>;

    RELAYER(overrides?: CallOverrides): Promise<[string]>;

    WETH9(overrides?: CallOverrides): Promise<[string]>;

    addSupportedFeeAsset(
      _asset: PromiseOrValue<string>,
      _isSuppoeted: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createWallet(
      _impl: PromiseOrValue<string>,
      pubkey: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      _call: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    ecdsaFactory(overrides?: CallOverrides): Promise<[string]>;

    nonces(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    priv(overrides?: CallOverrides): Promise<[string]>;

    queryFeeAsset(
      _feeAsset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    setEcdsaFactory(
      _factory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportedFeeAssets(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    walletAddress(
      _impl: PromiseOrValue<string>,
      pubkey: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      _call: PromiseOrValue<BytesLike>,
      _nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  PANCAKE_V2_FACTORY(overrides?: CallOverrides): Promise<string>;

  PANCAKE_V3_FACTORY(overrides?: CallOverrides): Promise<string>;

  RELAYER(overrides?: CallOverrides): Promise<string>;

  WETH9(overrides?: CallOverrides): Promise<string>;

  addSupportedFeeAsset(
    _asset: PromiseOrValue<string>,
    _isSuppoeted: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createWallet(
    _impl: PromiseOrValue<string>,
    pubkey: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    _call: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  ecdsaFactory(overrides?: CallOverrides): Promise<string>;

  nonces(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  priv(overrides?: CallOverrides): Promise<string>;

  queryFeeAsset(
    _feeAsset: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  setEcdsaFactory(
    _factory: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportedFeeAssets(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  walletAddress(
    _impl: PromiseOrValue<string>,
    pubkey: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    _call: PromiseOrValue<BytesLike>,
    _nonce: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    PANCAKE_V2_FACTORY(overrides?: CallOverrides): Promise<string>;

    PANCAKE_V3_FACTORY(overrides?: CallOverrides): Promise<string>;

    RELAYER(overrides?: CallOverrides): Promise<string>;

    WETH9(overrides?: CallOverrides): Promise<string>;

    addSupportedFeeAsset(
      _asset: PromiseOrValue<string>,
      _isSuppoeted: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    createWallet(
      _impl: PromiseOrValue<string>,
      pubkey: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      _call: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    ecdsaFactory(overrides?: CallOverrides): Promise<string>;

    nonces(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    priv(overrides?: CallOverrides): Promise<string>;

    queryFeeAsset(
      _feeAsset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setEcdsaFactory(
      _factory: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportedFeeAssets(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    walletAddress(
      _impl: PromiseOrValue<string>,
      pubkey: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      _call: PromiseOrValue<BytesLike>,
      _nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "WalletCreated(address,bytes32)"(
      _wallet?: PromiseOrValue<string> | null,
      _callID?: PromiseOrValue<BytesLike> | null
    ): WalletCreatedEventFilter;
    WalletCreated(
      _wallet?: PromiseOrValue<string> | null,
      _callID?: PromiseOrValue<BytesLike> | null
    ): WalletCreatedEventFilter;
  };

  estimateGas: {
    PANCAKE_V2_FACTORY(overrides?: CallOverrides): Promise<BigNumber>;

    PANCAKE_V3_FACTORY(overrides?: CallOverrides): Promise<BigNumber>;

    RELAYER(overrides?: CallOverrides): Promise<BigNumber>;

    WETH9(overrides?: CallOverrides): Promise<BigNumber>;

    addSupportedFeeAsset(
      _asset: PromiseOrValue<string>,
      _isSuppoeted: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createWallet(
      _impl: PromiseOrValue<string>,
      pubkey: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      _call: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    ecdsaFactory(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    priv(overrides?: CallOverrides): Promise<BigNumber>;

    queryFeeAsset(
      _feeAsset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setEcdsaFactory(
      _factory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportedFeeAssets(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    walletAddress(
      _impl: PromiseOrValue<string>,
      pubkey: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      _call: PromiseOrValue<BytesLike>,
      _nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    PANCAKE_V2_FACTORY(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PANCAKE_V3_FACTORY(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    RELAYER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WETH9(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addSupportedFeeAsset(
      _asset: PromiseOrValue<string>,
      _isSuppoeted: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createWallet(
      _impl: PromiseOrValue<string>,
      pubkey: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      _call: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    ecdsaFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonces(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    priv(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    queryFeeAsset(
      _feeAsset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setEcdsaFactory(
      _factory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportedFeeAssets(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    walletAddress(
      _impl: PromiseOrValue<string>,
      pubkey: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      _call: PromiseOrValue<BytesLike>,
      _nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
