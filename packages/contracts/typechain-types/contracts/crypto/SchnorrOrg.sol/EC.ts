/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface ECInterface extends utils.Interface {
  functions: {
    "_ecAdd(uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "_ecDouble(uint256,uint256,uint256)": FunctionFragment;
    "_ecMul(uint256,uint256,uint256,uint256)": FunctionFragment;
    "_ecSub(uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "_inverse(uint256)": FunctionFragment;
    "_jAdd(uint256,uint256,uint256,uint256)": FunctionFragment;
    "_jDiv(uint256,uint256,uint256,uint256)": FunctionFragment;
    "_jMul(uint256,uint256,uint256,uint256)": FunctionFragment;
    "_jSub(uint256,uint256,uint256,uint256)": FunctionFragment;
    "a()": FunctionFragment;
    "b()": FunctionFragment;
    "deriveKey(uint256,uint256,uint256)": FunctionFragment;
    "ecInv(uint256,uint256)": FunctionFragment;
    "ecSub(uint256,uint256,uint256,uint256)": FunctionFragment;
    "ecadd(uint256,uint256,uint256,uint256)": FunctionFragment;
    "ecmul(uint256,uint256,uint256)": FunctionFragment;
    "ecmulVerify(uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "g1add(uint256,uint256,uint256,uint256)": FunctionFragment;
    "g1sub(uint256,uint256,uint256,uint256)": FunctionFragment;
    "gx()": FunctionFragment;
    "gy()": FunctionFragment;
    "isOnCurve(uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "n()": FunctionFragment;
    "p()": FunctionFragment;
    "publicKey(uint256)": FunctionFragment;
    "publicKeyVerify(uint256,uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_ecAdd"
      | "_ecDouble"
      | "_ecMul"
      | "_ecSub"
      | "_inverse"
      | "_jAdd"
      | "_jDiv"
      | "_jMul"
      | "_jSub"
      | "a"
      | "b"
      | "deriveKey"
      | "ecInv"
      | "ecSub"
      | "ecadd"
      | "ecmul"
      | "ecmulVerify"
      | "g1add"
      | "g1sub"
      | "gx"
      | "gy"
      | "isOnCurve"
      | "n"
      | "p"
      | "publicKey"
      | "publicKeyVerify"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_ecAdd",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "_ecDouble",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "_ecMul",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "_ecSub",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "_inverse",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "_jAdd",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "_jDiv",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "_jMul",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "_jSub",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "a", values?: undefined): string;
  encodeFunctionData(functionFragment: "b", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deriveKey",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "ecInv",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "ecSub",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "ecadd",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "ecmul",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "ecmulVerify",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "g1add",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "g1sub",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "gx", values?: undefined): string;
  encodeFunctionData(functionFragment: "gy", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isOnCurve",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "n", values?: undefined): string;
  encodeFunctionData(functionFragment: "p", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "publicKey",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "publicKeyVerify",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "_ecAdd", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_ecDouble", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_ecMul", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_ecSub", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_inverse", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_jAdd", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_jDiv", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_jMul", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_jSub", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "a", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "b", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deriveKey", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ecInv", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ecSub", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ecadd", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ecmul", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ecmulVerify",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "g1add", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "g1sub", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gx", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOnCurve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "n", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "p", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "publicKey", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "publicKeyVerify",
    data: BytesLike
  ): Result;

  events: {};
}

export interface EC extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ECInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _ecAdd(
      x1: PromiseOrValue<BigNumberish>,
      y1: PromiseOrValue<BigNumberish>,
      z1: PromiseOrValue<BigNumberish>,
      x2: PromiseOrValue<BigNumberish>,
      y2: PromiseOrValue<BigNumberish>,
      z2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        x3: BigNumber;
        y3: BigNumber;
        z3: BigNumber;
      }
    >;

    _ecDouble(
      x1: PromiseOrValue<BigNumberish>,
      y1: PromiseOrValue<BigNumberish>,
      z1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        x3: BigNumber;
        y3: BigNumber;
        z3: BigNumber;
      }
    >;

    _ecMul(
      d: PromiseOrValue<BigNumberish>,
      x1: PromiseOrValue<BigNumberish>,
      y1: PromiseOrValue<BigNumberish>,
      z1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        x3: BigNumber;
        y3: BigNumber;
        z3: BigNumber;
      }
    >;

    _ecSub(
      x1: PromiseOrValue<BigNumberish>,
      y1: PromiseOrValue<BigNumberish>,
      z1: PromiseOrValue<BigNumberish>,
      x2: PromiseOrValue<BigNumberish>,
      y2: PromiseOrValue<BigNumberish>,
      z2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        x3: BigNumber;
        y3: BigNumber;
        z3: BigNumber;
      }
    >;

    _inverse(
      val: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { invVal: BigNumber }>;

    _jAdd(
      x1: PromiseOrValue<BigNumberish>,
      z1: PromiseOrValue<BigNumberish>,
      x2: PromiseOrValue<BigNumberish>,
      z2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { x3: BigNumber; z3: BigNumber }>;

    _jDiv(
      x1: PromiseOrValue<BigNumberish>,
      z1: PromiseOrValue<BigNumberish>,
      x2: PromiseOrValue<BigNumberish>,
      z2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { x3: BigNumber; z3: BigNumber }>;

    _jMul(
      x1: PromiseOrValue<BigNumberish>,
      z1: PromiseOrValue<BigNumberish>,
      x2: PromiseOrValue<BigNumberish>,
      z2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { x3: BigNumber; z3: BigNumber }>;

    _jSub(
      x1: PromiseOrValue<BigNumberish>,
      z1: PromiseOrValue<BigNumberish>,
      x2: PromiseOrValue<BigNumberish>,
      z2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { x3: BigNumber; z3: BigNumber }>;

    a(overrides?: CallOverrides): Promise<[BigNumber]>;

    b(overrides?: CallOverrides): Promise<[BigNumber]>;

    deriveKey(
      privKey: PromiseOrValue<BigNumberish>,
      pubX: PromiseOrValue<BigNumberish>,
      pubY: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { qx: BigNumber; qy: BigNumber }>;

    ecInv(
      _x: PromiseOrValue<BigNumberish>,
      _y: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    ecSub(
      _x1: PromiseOrValue<BigNumberish>,
      _y1: PromiseOrValue<BigNumberish>,
      _x2: PromiseOrValue<BigNumberish>,
      _y2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    ecadd(
      x1: PromiseOrValue<BigNumberish>,
      y1: PromiseOrValue<BigNumberish>,
      x2: PromiseOrValue<BigNumberish>,
      y2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { x3: BigNumber; y3: BigNumber }>;

    ecmul(
      x1: PromiseOrValue<BigNumberish>,
      y1: PromiseOrValue<BigNumberish>,
      scalar: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { x2: BigNumber; y2: BigNumber }>;

    ecmulVerify(
      x1: PromiseOrValue<BigNumberish>,
      y1: PromiseOrValue<BigNumberish>,
      scalar: PromiseOrValue<BigNumberish>,
      qx: PromiseOrValue<BigNumberish>,
      qy: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    g1add(
      x1: PromiseOrValue<BigNumberish>,
      y1: PromiseOrValue<BigNumberish>,
      x2: PromiseOrValue<BigNumberish>,
      y2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { x3: BigNumber; y3: BigNumber }>;

    g1sub(
      x1: PromiseOrValue<BigNumberish>,
      y1: PromiseOrValue<BigNumberish>,
      x2: PromiseOrValue<BigNumberish>,
      y2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { x3: BigNumber; y3: BigNumber }>;

    gx(overrides?: CallOverrides): Promise<[BigNumber]>;

    gy(overrides?: CallOverrides): Promise<[BigNumber]>;

    isOnCurve(
      _x: PromiseOrValue<BigNumberish>,
      _y: PromiseOrValue<BigNumberish>,
      _aa: PromiseOrValue<BigNumberish>,
      _bb: PromiseOrValue<BigNumberish>,
      _pp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    n(overrides?: CallOverrides): Promise<[BigNumber]>;

    p(overrides?: CallOverrides): Promise<[BigNumber]>;

    publicKey(
      privKey: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { qx: BigNumber; qy: BigNumber }>;

    publicKeyVerify(
      privKey: PromiseOrValue<BigNumberish>,
      x: PromiseOrValue<BigNumberish>,
      y: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  _ecAdd(
    x1: PromiseOrValue<BigNumberish>,
    y1: PromiseOrValue<BigNumberish>,
    z1: PromiseOrValue<BigNumberish>,
    x2: PromiseOrValue<BigNumberish>,
    y2: PromiseOrValue<BigNumberish>,
    z2: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      x3: BigNumber;
      y3: BigNumber;
      z3: BigNumber;
    }
  >;

  _ecDouble(
    x1: PromiseOrValue<BigNumberish>,
    y1: PromiseOrValue<BigNumberish>,
    z1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      x3: BigNumber;
      y3: BigNumber;
      z3: BigNumber;
    }
  >;

  _ecMul(
    d: PromiseOrValue<BigNumberish>,
    x1: PromiseOrValue<BigNumberish>,
    y1: PromiseOrValue<BigNumberish>,
    z1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      x3: BigNumber;
      y3: BigNumber;
      z3: BigNumber;
    }
  >;

  _ecSub(
    x1: PromiseOrValue<BigNumberish>,
    y1: PromiseOrValue<BigNumberish>,
    z1: PromiseOrValue<BigNumberish>,
    x2: PromiseOrValue<BigNumberish>,
    y2: PromiseOrValue<BigNumberish>,
    z2: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      x3: BigNumber;
      y3: BigNumber;
      z3: BigNumber;
    }
  >;

  _inverse(
    val: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  _jAdd(
    x1: PromiseOrValue<BigNumberish>,
    z1: PromiseOrValue<BigNumberish>,
    x2: PromiseOrValue<BigNumberish>,
    z2: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { x3: BigNumber; z3: BigNumber }>;

  _jDiv(
    x1: PromiseOrValue<BigNumberish>,
    z1: PromiseOrValue<BigNumberish>,
    x2: PromiseOrValue<BigNumberish>,
    z2: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { x3: BigNumber; z3: BigNumber }>;

  _jMul(
    x1: PromiseOrValue<BigNumberish>,
    z1: PromiseOrValue<BigNumberish>,
    x2: PromiseOrValue<BigNumberish>,
    z2: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { x3: BigNumber; z3: BigNumber }>;

  _jSub(
    x1: PromiseOrValue<BigNumberish>,
    z1: PromiseOrValue<BigNumberish>,
    x2: PromiseOrValue<BigNumberish>,
    z2: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { x3: BigNumber; z3: BigNumber }>;

  a(overrides?: CallOverrides): Promise<BigNumber>;

  b(overrides?: CallOverrides): Promise<BigNumber>;

  deriveKey(
    privKey: PromiseOrValue<BigNumberish>,
    pubX: PromiseOrValue<BigNumberish>,
    pubY: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { qx: BigNumber; qy: BigNumber }>;

  ecInv(
    _x: PromiseOrValue<BigNumberish>,
    _y: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  ecSub(
    _x1: PromiseOrValue<BigNumberish>,
    _y1: PromiseOrValue<BigNumberish>,
    _x2: PromiseOrValue<BigNumberish>,
    _y2: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  ecadd(
    x1: PromiseOrValue<BigNumberish>,
    y1: PromiseOrValue<BigNumberish>,
    x2: PromiseOrValue<BigNumberish>,
    y2: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { x3: BigNumber; y3: BigNumber }>;

  ecmul(
    x1: PromiseOrValue<BigNumberish>,
    y1: PromiseOrValue<BigNumberish>,
    scalar: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { x2: BigNumber; y2: BigNumber }>;

  ecmulVerify(
    x1: PromiseOrValue<BigNumberish>,
    y1: PromiseOrValue<BigNumberish>,
    scalar: PromiseOrValue<BigNumberish>,
    qx: PromiseOrValue<BigNumberish>,
    qy: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  g1add(
    x1: PromiseOrValue<BigNumberish>,
    y1: PromiseOrValue<BigNumberish>,
    x2: PromiseOrValue<BigNumberish>,
    y2: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { x3: BigNumber; y3: BigNumber }>;

  g1sub(
    x1: PromiseOrValue<BigNumberish>,
    y1: PromiseOrValue<BigNumberish>,
    x2: PromiseOrValue<BigNumberish>,
    y2: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { x3: BigNumber; y3: BigNumber }>;

  gx(overrides?: CallOverrides): Promise<BigNumber>;

  gy(overrides?: CallOverrides): Promise<BigNumber>;

  isOnCurve(
    _x: PromiseOrValue<BigNumberish>,
    _y: PromiseOrValue<BigNumberish>,
    _aa: PromiseOrValue<BigNumberish>,
    _bb: PromiseOrValue<BigNumberish>,
    _pp: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  n(overrides?: CallOverrides): Promise<BigNumber>;

  p(overrides?: CallOverrides): Promise<BigNumber>;

  publicKey(
    privKey: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { qx: BigNumber; qy: BigNumber }>;

  publicKeyVerify(
    privKey: PromiseOrValue<BigNumberish>,
    x: PromiseOrValue<BigNumberish>,
    y: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    _ecAdd(
      x1: PromiseOrValue<BigNumberish>,
      y1: PromiseOrValue<BigNumberish>,
      z1: PromiseOrValue<BigNumberish>,
      x2: PromiseOrValue<BigNumberish>,
      y2: PromiseOrValue<BigNumberish>,
      z2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        x3: BigNumber;
        y3: BigNumber;
        z3: BigNumber;
      }
    >;

    _ecDouble(
      x1: PromiseOrValue<BigNumberish>,
      y1: PromiseOrValue<BigNumberish>,
      z1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        x3: BigNumber;
        y3: BigNumber;
        z3: BigNumber;
      }
    >;

    _ecMul(
      d: PromiseOrValue<BigNumberish>,
      x1: PromiseOrValue<BigNumberish>,
      y1: PromiseOrValue<BigNumberish>,
      z1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        x3: BigNumber;
        y3: BigNumber;
        z3: BigNumber;
      }
    >;

    _ecSub(
      x1: PromiseOrValue<BigNumberish>,
      y1: PromiseOrValue<BigNumberish>,
      z1: PromiseOrValue<BigNumberish>,
      x2: PromiseOrValue<BigNumberish>,
      y2: PromiseOrValue<BigNumberish>,
      z2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        x3: BigNumber;
        y3: BigNumber;
        z3: BigNumber;
      }
    >;

    _inverse(
      val: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _jAdd(
      x1: PromiseOrValue<BigNumberish>,
      z1: PromiseOrValue<BigNumberish>,
      x2: PromiseOrValue<BigNumberish>,
      z2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { x3: BigNumber; z3: BigNumber }>;

    _jDiv(
      x1: PromiseOrValue<BigNumberish>,
      z1: PromiseOrValue<BigNumberish>,
      x2: PromiseOrValue<BigNumberish>,
      z2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { x3: BigNumber; z3: BigNumber }>;

    _jMul(
      x1: PromiseOrValue<BigNumberish>,
      z1: PromiseOrValue<BigNumberish>,
      x2: PromiseOrValue<BigNumberish>,
      z2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { x3: BigNumber; z3: BigNumber }>;

    _jSub(
      x1: PromiseOrValue<BigNumberish>,
      z1: PromiseOrValue<BigNumberish>,
      x2: PromiseOrValue<BigNumberish>,
      z2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { x3: BigNumber; z3: BigNumber }>;

    a(overrides?: CallOverrides): Promise<BigNumber>;

    b(overrides?: CallOverrides): Promise<BigNumber>;

    deriveKey(
      privKey: PromiseOrValue<BigNumberish>,
      pubX: PromiseOrValue<BigNumberish>,
      pubY: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { qx: BigNumber; qy: BigNumber }>;

    ecInv(
      _x: PromiseOrValue<BigNumberish>,
      _y: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    ecSub(
      _x1: PromiseOrValue<BigNumberish>,
      _y1: PromiseOrValue<BigNumberish>,
      _x2: PromiseOrValue<BigNumberish>,
      _y2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    ecadd(
      x1: PromiseOrValue<BigNumberish>,
      y1: PromiseOrValue<BigNumberish>,
      x2: PromiseOrValue<BigNumberish>,
      y2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { x3: BigNumber; y3: BigNumber }>;

    ecmul(
      x1: PromiseOrValue<BigNumberish>,
      y1: PromiseOrValue<BigNumberish>,
      scalar: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { x2: BigNumber; y2: BigNumber }>;

    ecmulVerify(
      x1: PromiseOrValue<BigNumberish>,
      y1: PromiseOrValue<BigNumberish>,
      scalar: PromiseOrValue<BigNumberish>,
      qx: PromiseOrValue<BigNumberish>,
      qy: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    g1add(
      x1: PromiseOrValue<BigNumberish>,
      y1: PromiseOrValue<BigNumberish>,
      x2: PromiseOrValue<BigNumberish>,
      y2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { x3: BigNumber; y3: BigNumber }>;

    g1sub(
      x1: PromiseOrValue<BigNumberish>,
      y1: PromiseOrValue<BigNumberish>,
      x2: PromiseOrValue<BigNumberish>,
      y2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { x3: BigNumber; y3: BigNumber }>;

    gx(overrides?: CallOverrides): Promise<BigNumber>;

    gy(overrides?: CallOverrides): Promise<BigNumber>;

    isOnCurve(
      _x: PromiseOrValue<BigNumberish>,
      _y: PromiseOrValue<BigNumberish>,
      _aa: PromiseOrValue<BigNumberish>,
      _bb: PromiseOrValue<BigNumberish>,
      _pp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    n(overrides?: CallOverrides): Promise<BigNumber>;

    p(overrides?: CallOverrides): Promise<BigNumber>;

    publicKey(
      privKey: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { qx: BigNumber; qy: BigNumber }>;

    publicKeyVerify(
      privKey: PromiseOrValue<BigNumberish>,
      x: PromiseOrValue<BigNumberish>,
      y: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    _ecAdd(
      x1: PromiseOrValue<BigNumberish>,
      y1: PromiseOrValue<BigNumberish>,
      z1: PromiseOrValue<BigNumberish>,
      x2: PromiseOrValue<BigNumberish>,
      y2: PromiseOrValue<BigNumberish>,
      z2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _ecDouble(
      x1: PromiseOrValue<BigNumberish>,
      y1: PromiseOrValue<BigNumberish>,
      z1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _ecMul(
      d: PromiseOrValue<BigNumberish>,
      x1: PromiseOrValue<BigNumberish>,
      y1: PromiseOrValue<BigNumberish>,
      z1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _ecSub(
      x1: PromiseOrValue<BigNumberish>,
      y1: PromiseOrValue<BigNumberish>,
      z1: PromiseOrValue<BigNumberish>,
      x2: PromiseOrValue<BigNumberish>,
      y2: PromiseOrValue<BigNumberish>,
      z2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _inverse(
      val: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _jAdd(
      x1: PromiseOrValue<BigNumberish>,
      z1: PromiseOrValue<BigNumberish>,
      x2: PromiseOrValue<BigNumberish>,
      z2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _jDiv(
      x1: PromiseOrValue<BigNumberish>,
      z1: PromiseOrValue<BigNumberish>,
      x2: PromiseOrValue<BigNumberish>,
      z2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _jMul(
      x1: PromiseOrValue<BigNumberish>,
      z1: PromiseOrValue<BigNumberish>,
      x2: PromiseOrValue<BigNumberish>,
      z2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _jSub(
      x1: PromiseOrValue<BigNumberish>,
      z1: PromiseOrValue<BigNumberish>,
      x2: PromiseOrValue<BigNumberish>,
      z2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    a(overrides?: CallOverrides): Promise<BigNumber>;

    b(overrides?: CallOverrides): Promise<BigNumber>;

    deriveKey(
      privKey: PromiseOrValue<BigNumberish>,
      pubX: PromiseOrValue<BigNumberish>,
      pubY: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ecInv(
      _x: PromiseOrValue<BigNumberish>,
      _y: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ecSub(
      _x1: PromiseOrValue<BigNumberish>,
      _y1: PromiseOrValue<BigNumberish>,
      _x2: PromiseOrValue<BigNumberish>,
      _y2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ecadd(
      x1: PromiseOrValue<BigNumberish>,
      y1: PromiseOrValue<BigNumberish>,
      x2: PromiseOrValue<BigNumberish>,
      y2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ecmul(
      x1: PromiseOrValue<BigNumberish>,
      y1: PromiseOrValue<BigNumberish>,
      scalar: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ecmulVerify(
      x1: PromiseOrValue<BigNumberish>,
      y1: PromiseOrValue<BigNumberish>,
      scalar: PromiseOrValue<BigNumberish>,
      qx: PromiseOrValue<BigNumberish>,
      qy: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    g1add(
      x1: PromiseOrValue<BigNumberish>,
      y1: PromiseOrValue<BigNumberish>,
      x2: PromiseOrValue<BigNumberish>,
      y2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    g1sub(
      x1: PromiseOrValue<BigNumberish>,
      y1: PromiseOrValue<BigNumberish>,
      x2: PromiseOrValue<BigNumberish>,
      y2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gx(overrides?: CallOverrides): Promise<BigNumber>;

    gy(overrides?: CallOverrides): Promise<BigNumber>;

    isOnCurve(
      _x: PromiseOrValue<BigNumberish>,
      _y: PromiseOrValue<BigNumberish>,
      _aa: PromiseOrValue<BigNumberish>,
      _bb: PromiseOrValue<BigNumberish>,
      _pp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    n(overrides?: CallOverrides): Promise<BigNumber>;

    p(overrides?: CallOverrides): Promise<BigNumber>;

    publicKey(
      privKey: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    publicKeyVerify(
      privKey: PromiseOrValue<BigNumberish>,
      x: PromiseOrValue<BigNumberish>,
      y: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _ecAdd(
      x1: PromiseOrValue<BigNumberish>,
      y1: PromiseOrValue<BigNumberish>,
      z1: PromiseOrValue<BigNumberish>,
      x2: PromiseOrValue<BigNumberish>,
      y2: PromiseOrValue<BigNumberish>,
      z2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _ecDouble(
      x1: PromiseOrValue<BigNumberish>,
      y1: PromiseOrValue<BigNumberish>,
      z1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _ecMul(
      d: PromiseOrValue<BigNumberish>,
      x1: PromiseOrValue<BigNumberish>,
      y1: PromiseOrValue<BigNumberish>,
      z1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _ecSub(
      x1: PromiseOrValue<BigNumberish>,
      y1: PromiseOrValue<BigNumberish>,
      z1: PromiseOrValue<BigNumberish>,
      x2: PromiseOrValue<BigNumberish>,
      y2: PromiseOrValue<BigNumberish>,
      z2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _inverse(
      val: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _jAdd(
      x1: PromiseOrValue<BigNumberish>,
      z1: PromiseOrValue<BigNumberish>,
      x2: PromiseOrValue<BigNumberish>,
      z2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _jDiv(
      x1: PromiseOrValue<BigNumberish>,
      z1: PromiseOrValue<BigNumberish>,
      x2: PromiseOrValue<BigNumberish>,
      z2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _jMul(
      x1: PromiseOrValue<BigNumberish>,
      z1: PromiseOrValue<BigNumberish>,
      x2: PromiseOrValue<BigNumberish>,
      z2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _jSub(
      x1: PromiseOrValue<BigNumberish>,
      z1: PromiseOrValue<BigNumberish>,
      x2: PromiseOrValue<BigNumberish>,
      z2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    a(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    b(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deriveKey(
      privKey: PromiseOrValue<BigNumberish>,
      pubX: PromiseOrValue<BigNumberish>,
      pubY: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ecInv(
      _x: PromiseOrValue<BigNumberish>,
      _y: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ecSub(
      _x1: PromiseOrValue<BigNumberish>,
      _y1: PromiseOrValue<BigNumberish>,
      _x2: PromiseOrValue<BigNumberish>,
      _y2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ecadd(
      x1: PromiseOrValue<BigNumberish>,
      y1: PromiseOrValue<BigNumberish>,
      x2: PromiseOrValue<BigNumberish>,
      y2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ecmul(
      x1: PromiseOrValue<BigNumberish>,
      y1: PromiseOrValue<BigNumberish>,
      scalar: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ecmulVerify(
      x1: PromiseOrValue<BigNumberish>,
      y1: PromiseOrValue<BigNumberish>,
      scalar: PromiseOrValue<BigNumberish>,
      qx: PromiseOrValue<BigNumberish>,
      qy: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    g1add(
      x1: PromiseOrValue<BigNumberish>,
      y1: PromiseOrValue<BigNumberish>,
      x2: PromiseOrValue<BigNumberish>,
      y2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    g1sub(
      x1: PromiseOrValue<BigNumberish>,
      y1: PromiseOrValue<BigNumberish>,
      x2: PromiseOrValue<BigNumberish>,
      y2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gx(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isOnCurve(
      _x: PromiseOrValue<BigNumberish>,
      _y: PromiseOrValue<BigNumberish>,
      _aa: PromiseOrValue<BigNumberish>,
      _bb: PromiseOrValue<BigNumberish>,
      _pp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    n(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    p(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    publicKey(
      privKey: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    publicKeyVerify(
      privKey: PromiseOrValue<BigNumberish>,
      x: PromiseOrValue<BigNumberish>,
      y: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
