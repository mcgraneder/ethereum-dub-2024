/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export interface ContractAddressesInterface extends utils.Interface {
  functions: {
    "PANCAKE_V3_FACTORY_BSC()": FunctionFragment;
    "PANCAKE_V3_FACTORY_ETH()": FunctionFragment;
    "WETH_BSC()": FunctionFragment;
    "WETH_ETH()": FunctionFragment;
    "getQuoteFromSqrtRatioX96(address,address,address,uint128,bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "PANCAKE_V3_FACTORY_BSC"
      | "PANCAKE_V3_FACTORY_ETH"
      | "WETH_BSC"
      | "WETH_ETH"
      | "getQuoteFromSqrtRatioX96"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "PANCAKE_V3_FACTORY_BSC",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PANCAKE_V3_FACTORY_ETH",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "WETH_BSC", values?: undefined): string;
  encodeFunctionData(functionFragment: "WETH_ETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getQuoteFromSqrtRatioX96",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "PANCAKE_V3_FACTORY_BSC",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PANCAKE_V3_FACTORY_ETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "WETH_BSC", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "WETH_ETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getQuoteFromSqrtRatioX96",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ContractAddresses extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ContractAddressesInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    PANCAKE_V3_FACTORY_BSC(overrides?: CallOverrides): Promise<[string]>;

    PANCAKE_V3_FACTORY_ETH(overrides?: CallOverrides): Promise<[string]>;

    WETH_BSC(overrides?: CallOverrides): Promise<[string]>;

    WETH_ETH(overrides?: CallOverrides): Promise<[string]>;

    getQuoteFromSqrtRatioX96(
      WETH: PromiseOrValue<string>,
      quoteAsset: PromiseOrValue<string>,
      pancakeFactory: PromiseOrValue<string>,
      baseAmount: PromiseOrValue<BigNumberish>,
      inverse: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { quoteAmount: BigNumber }>;
  };

  PANCAKE_V3_FACTORY_BSC(overrides?: CallOverrides): Promise<string>;

  PANCAKE_V3_FACTORY_ETH(overrides?: CallOverrides): Promise<string>;

  WETH_BSC(overrides?: CallOverrides): Promise<string>;

  WETH_ETH(overrides?: CallOverrides): Promise<string>;

  getQuoteFromSqrtRatioX96(
    WETH: PromiseOrValue<string>,
    quoteAsset: PromiseOrValue<string>,
    pancakeFactory: PromiseOrValue<string>,
    baseAmount: PromiseOrValue<BigNumberish>,
    inverse: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    PANCAKE_V3_FACTORY_BSC(overrides?: CallOverrides): Promise<string>;

    PANCAKE_V3_FACTORY_ETH(overrides?: CallOverrides): Promise<string>;

    WETH_BSC(overrides?: CallOverrides): Promise<string>;

    WETH_ETH(overrides?: CallOverrides): Promise<string>;

    getQuoteFromSqrtRatioX96(
      WETH: PromiseOrValue<string>,
      quoteAsset: PromiseOrValue<string>,
      pancakeFactory: PromiseOrValue<string>,
      baseAmount: PromiseOrValue<BigNumberish>,
      inverse: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    PANCAKE_V3_FACTORY_BSC(overrides?: CallOverrides): Promise<BigNumber>;

    PANCAKE_V3_FACTORY_ETH(overrides?: CallOverrides): Promise<BigNumber>;

    WETH_BSC(overrides?: CallOverrides): Promise<BigNumber>;

    WETH_ETH(overrides?: CallOverrides): Promise<BigNumber>;

    getQuoteFromSqrtRatioX96(
      WETH: PromiseOrValue<string>,
      quoteAsset: PromiseOrValue<string>,
      pancakeFactory: PromiseOrValue<string>,
      baseAmount: PromiseOrValue<BigNumberish>,
      inverse: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    PANCAKE_V3_FACTORY_BSC(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PANCAKE_V3_FACTORY_ETH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    WETH_BSC(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WETH_ETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getQuoteFromSqrtRatioX96(
      WETH: PromiseOrValue<string>,
      quoteAsset: PromiseOrValue<string>,
      pancakeFactory: PromiseOrValue<string>,
      baseAmount: PromiseOrValue<BigNumberish>,
      inverse: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
