/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface ECDSAWalletFactoryInterface extends utils.Interface {
  functions: {
    "createWallet(uint256[2],address)": FunctionFragment;
    "factory()": FunctionFragment;
    "hashFromWallet(address)": FunctionFragment;
    "pubKeyHashFromWallet(address)": FunctionFragment;
    "publicKeyFromHash(bytes32,uint256)": FunctionFragment;
    "wallet()": FunctionFragment;
    "walletAddress(uint256[2],address,uint256)": FunctionFragment;
    "walletFromHash(bytes32)": FunctionFragment;
    "walletFromPubKeyHash(bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "createWallet"
      | "factory"
      | "hashFromWallet"
      | "pubKeyHashFromWallet"
      | "publicKeyFromHash"
      | "wallet"
      | "walletAddress"
      | "walletFromHash"
      | "walletFromPubKeyHash"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createWallet",
    values: [
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "hashFromWallet",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "pubKeyHashFromWallet",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "publicKeyFromHash",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "wallet", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "walletAddress",
    values: [
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "walletFromHash",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "walletFromPubKeyHash",
    values: [PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "createWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hashFromWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pubKeyHashFromWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publicKeyFromHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wallet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "walletAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "walletFromHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "walletFromPubKeyHash",
    data: BytesLike
  ): Result;

  events: {
    "PubKeySetForWallet(uint256[2],address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PubKeySetForWallet"): EventFragment;
}

export interface PubKeySetForWalletEventObject {
  newBLSKey: [BigNumber, BigNumber];
  wallet: string;
}
export type PubKeySetForWalletEvent = TypedEvent<
  [[BigNumber, BigNumber], string],
  PubKeySetForWalletEventObject
>;

export type PubKeySetForWalletEventFilter =
  TypedEventFilter<PubKeySetForWalletEvent>;

export interface ECDSAWalletFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ECDSAWalletFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createWallet(
      pubkey: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      _owner: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    hashFromWallet(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    pubKeyHashFromWallet(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    publicKeyFromHash(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    wallet(overrides?: CallOverrides): Promise<[string]>;

    walletAddress(
      pubkey: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      _owner: PromiseOrValue<string>,
      _nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    walletFromHash(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    walletFromPubKeyHash(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  createWallet(
    pubkey: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    _owner: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  factory(overrides?: CallOverrides): Promise<string>;

  hashFromWallet(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  pubKeyHashFromWallet(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  publicKeyFromHash(
    arg0: PromiseOrValue<BytesLike>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  wallet(overrides?: CallOverrides): Promise<string>;

  walletAddress(
    pubkey: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    _owner: PromiseOrValue<string>,
    _nonce: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  walletFromHash(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  walletFromPubKeyHash(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    createWallet(
      pubkey: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    factory(overrides?: CallOverrides): Promise<string>;

    hashFromWallet(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    pubKeyHashFromWallet(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    publicKeyFromHash(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    wallet(overrides?: CallOverrides): Promise<string>;

    walletAddress(
      pubkey: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      _owner: PromiseOrValue<string>,
      _nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    walletFromHash(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    walletFromPubKeyHash(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "PubKeySetForWallet(uint256[2],address)"(
      newBLSKey?: null,
      wallet?: null
    ): PubKeySetForWalletEventFilter;
    PubKeySetForWallet(
      newBLSKey?: null,
      wallet?: null
    ): PubKeySetForWalletEventFilter;
  };

  estimateGas: {
    createWallet(
      pubkey: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      _owner: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    hashFromWallet(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pubKeyHashFromWallet(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    publicKeyFromHash(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    wallet(overrides?: CallOverrides): Promise<BigNumber>;

    walletAddress(
      pubkey: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      _owner: PromiseOrValue<string>,
      _nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    walletFromHash(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    walletFromPubKeyHash(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createWallet(
      pubkey: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      _owner: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hashFromWallet(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pubKeyHashFromWallet(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    publicKeyFromHash(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    wallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    walletAddress(
      pubkey: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      _owner: PromiseOrValue<string>,
      _nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    walletFromHash(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    walletFromPubKeyHash(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
