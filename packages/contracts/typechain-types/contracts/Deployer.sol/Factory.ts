/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface FactoryInterface extends utils.Interface {
  functions: {
    "AA()": FunctionFragment;
    "BB()": FunctionFragment;
    "CreateProof(uint256,uint256)": FunctionFragment;
    "NN()": FunctionFragment;
    "PP()": FunctionFragment;
    "PrivDerive(uint256,uint256)": FunctionFragment;
    "PubDerive(uint256[2],uint256)": FunctionFragment;
    "SharedSecret(uint256,uint256[2])": FunctionFragment;
    "VerifyProof(uint256[2],uint256,uint256,uint256)": FunctionFragment;
    "computeAddress(bytes,uint256)": FunctionFragment;
    "deploy(bytes,uint256)": FunctionFragment;
    "gx()": FunctionFragment;
    "gy()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "AA"
      | "BB"
      | "CreateProof"
      | "NN"
      | "PP"
      | "PrivDerive"
      | "PubDerive"
      | "SharedSecret"
      | "VerifyProof"
      | "computeAddress"
      | "deploy"
      | "gx"
      | "gy"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "AA", values?: undefined): string;
  encodeFunctionData(functionFragment: "BB", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "CreateProof",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "NN", values?: undefined): string;
  encodeFunctionData(functionFragment: "PP", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "PrivDerive",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "PubDerive",
    values: [
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "SharedSecret",
    values: [
      PromiseOrValue<BigNumberish>,
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "VerifyProof",
    values: [
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "computeAddress",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "deploy",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "gx", values?: undefined): string;
  encodeFunctionData(functionFragment: "gy", values?: undefined): string;

  decodeFunctionResult(functionFragment: "AA", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "BB", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "CreateProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "NN", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "PP", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "PrivDerive", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "PubDerive", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "SharedSecret",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VerifyProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deploy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gx", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gy", data: BytesLike): Result;

  events: {
    "Deployed(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deployed"): EventFragment;
}

export interface DeployedEventObject {
  addr: string;
  salt: BigNumber;
}
export type DeployedEvent = TypedEvent<
  [string, BigNumber],
  DeployedEventObject
>;

export type DeployedEventFilter = TypedEventFilter<DeployedEvent>;

export interface Factory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    AA(overrides?: CallOverrides): Promise<[BigNumber]>;

    BB(overrides?: CallOverrides): Promise<[BigNumber]>;

    CreateProof(
      secret: PromiseOrValue<BigNumberish>,
      message: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        pubkeyX: BigNumber;
        pubkeyY: BigNumber;
        out_e: BigNumber;
        out_s: BigNumber;
      }
    >;

    NN(overrides?: CallOverrides): Promise<[BigNumber]>;

    PP(overrides?: CallOverrides): Promise<[BigNumber]>;

    PrivDerive(
      secret_key: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    PubDerive(
      pubkey: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { pubkeyX: BigNumber; pubkeyY: BigNumber }
    >;

    SharedSecret(
      my_secret: PromiseOrValue<BigNumberish>,
      their_public: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { xPX: BigNumber; xPY: BigNumber }>;

    VerifyProof(
      pubkey: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      message: PromiseOrValue<BigNumberish>,
      s: PromiseOrValue<BigNumberish>,
      e: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { verified: boolean }>;

    computeAddress(
      bytecode: PromiseOrValue<BytesLike>,
      salt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    deploy(
      bytecode: PromiseOrValue<BytesLike>,
      salt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    gx(overrides?: CallOverrides): Promise<[BigNumber]>;

    gy(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  AA(overrides?: CallOverrides): Promise<BigNumber>;

  BB(overrides?: CallOverrides): Promise<BigNumber>;

  CreateProof(
    secret: PromiseOrValue<BigNumberish>,
    message: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      pubkeyX: BigNumber;
      pubkeyY: BigNumber;
      out_e: BigNumber;
      out_s: BigNumber;
    }
  >;

  NN(overrides?: CallOverrides): Promise<BigNumber>;

  PP(overrides?: CallOverrides): Promise<BigNumber>;

  PrivDerive(
    secret_key: PromiseOrValue<BigNumberish>,
    nonce: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  PubDerive(
    pubkey: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    nonce: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { pubkeyX: BigNumber; pubkeyY: BigNumber }
  >;

  SharedSecret(
    my_secret: PromiseOrValue<BigNumberish>,
    their_public: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { xPX: BigNumber; xPY: BigNumber }>;

  VerifyProof(
    pubkey: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    message: PromiseOrValue<BigNumberish>,
    s: PromiseOrValue<BigNumberish>,
    e: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  computeAddress(
    bytecode: PromiseOrValue<BytesLike>,
    salt: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  deploy(
    bytecode: PromiseOrValue<BytesLike>,
    salt: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  gx(overrides?: CallOverrides): Promise<BigNumber>;

  gy(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    AA(overrides?: CallOverrides): Promise<BigNumber>;

    BB(overrides?: CallOverrides): Promise<BigNumber>;

    CreateProof(
      secret: PromiseOrValue<BigNumberish>,
      message: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        pubkeyX: BigNumber;
        pubkeyY: BigNumber;
        out_e: BigNumber;
        out_s: BigNumber;
      }
    >;

    NN(overrides?: CallOverrides): Promise<BigNumber>;

    PP(overrides?: CallOverrides): Promise<BigNumber>;

    PrivDerive(
      secret_key: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    PubDerive(
      pubkey: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { pubkeyX: BigNumber; pubkeyY: BigNumber }
    >;

    SharedSecret(
      my_secret: PromiseOrValue<BigNumberish>,
      their_public: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { xPX: BigNumber; xPY: BigNumber }>;

    VerifyProof(
      pubkey: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      message: PromiseOrValue<BigNumberish>,
      s: PromiseOrValue<BigNumberish>,
      e: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    computeAddress(
      bytecode: PromiseOrValue<BytesLike>,
      salt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    deploy(
      bytecode: PromiseOrValue<BytesLike>,
      salt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    gx(overrides?: CallOverrides): Promise<BigNumber>;

    gy(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "Deployed(address,uint256)"(addr?: null, salt?: null): DeployedEventFilter;
    Deployed(addr?: null, salt?: null): DeployedEventFilter;
  };

  estimateGas: {
    AA(overrides?: CallOverrides): Promise<BigNumber>;

    BB(overrides?: CallOverrides): Promise<BigNumber>;

    CreateProof(
      secret: PromiseOrValue<BigNumberish>,
      message: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    NN(overrides?: CallOverrides): Promise<BigNumber>;

    PP(overrides?: CallOverrides): Promise<BigNumber>;

    PrivDerive(
      secret_key: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    PubDerive(
      pubkey: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    SharedSecret(
      my_secret: PromiseOrValue<BigNumberish>,
      their_public: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    VerifyProof(
      pubkey: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      message: PromiseOrValue<BigNumberish>,
      s: PromiseOrValue<BigNumberish>,
      e: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeAddress(
      bytecode: PromiseOrValue<BytesLike>,
      salt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deploy(
      bytecode: PromiseOrValue<BytesLike>,
      salt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    gx(overrides?: CallOverrides): Promise<BigNumber>;

    gy(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    AA(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    BB(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    CreateProof(
      secret: PromiseOrValue<BigNumberish>,
      message: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    NN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PrivDerive(
      secret_key: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PubDerive(
      pubkey: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SharedSecret(
      my_secret: PromiseOrValue<BigNumberish>,
      their_public: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    VerifyProof(
      pubkey: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      message: PromiseOrValue<BigNumberish>,
      s: PromiseOrValue<BigNumberish>,
      e: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    computeAddress(
      bytecode: PromiseOrValue<BytesLike>,
      salt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deploy(
      bytecode: PromiseOrValue<BytesLike>,
      salt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    gx(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gy(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
